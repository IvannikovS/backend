buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.flywaydb:flyway-gradle-plugin:11.10.0"
		classpath "org.flywaydb:flyway-database-postgresql:11.10.0"
		classpath "org.postgresql:postgresql:42.7.7"
	}
}



plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'nu.studer.jooq' version '10.1'
	id 'org.flywaydb.flyway' version '11.10.0'
}

group = 'ru.inline.ivannikov'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql:42.7.7'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.mapstruct:mapstruct:1.6.1'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.1'
	jooqGenerator "org.jooq:jooq-meta:3.20.3"
	jooqGenerator "org.jooq:jooq-codegen:3.20.3"
	jooqGenerator "org.jooq:jooq:3.20.3"
	jooqGenerator 'org.postgresql:postgresql:42.7.7'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
}

flyway {
	driver    = 'org.postgresql.Driver'
	url       = 'jdbc:postgresql://localhost:5433/inline'
	user      = 'user'
	password  = 'qwerty'
	defaultSchema = 'purchase'
}

jooq {
	version = '3.20.3'
	configurations {
		main {
			generationTool {
				logging = org.jooq.meta.jaxb.Logging.WARN
				jdbc {
					driver = 'org.postgresql.Driver'
					url = 'jdbc:postgresql://localhost:5433/inline'
					user = 'user'
					password = 'qwerty'
				}
				generator {
					name = 'org.jooq.codegen.DefaultGenerator'
					database {
						name = 'org.jooq.meta.postgres.PostgresDatabase'
						inputSchema = 'purchase'
					}
					generate {
						deprecated = false
						records = true
						immutablePojos = true
						fluentSetters = true
					}
					target {
						packageName = 'jooqdata'
						directory = 'src/main/java/jooq'
					}
					strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
				}
			}
		}
	}
}


tasks.named('test') {
	useJUnitPlatform()
}